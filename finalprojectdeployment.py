# -*- coding: utf-8 -*-
"""FinalProjectDeployment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dvNP2JGHtQ150IFv6nGS2Zd7FOJkOloa
"""

!pip install flask-ngrok pyngrok
!ngrok authtoken 2jPvYS34ZllD1YvJmUA4rBQItRG_436Z1eM2nuB8aB173Fo8u  # You need to sign up for a free ngrok account to get a token
!ngrok config add-authtoken 2jPvYS34ZllD1YvJmUA4rBQItRG_436Z1eM2nuB8aB173Fo8u
!pip install flask-cors
!pip install --upgrade pyngrok flask-ngrok
!pip install requests

import numpy as np
import requests
import json
from sklearn.preprocessing import OneHotEncoder
from datetime import datetime
from sklearn.preprocessing import StandardScaler

def user_input_transformer(features):

    # Separate numerical and categorical features
    numerical_features = [
        features['package_weight(Kg)'],#
        features['Day'],#
        features['Month'],#
        features['Year'],#
        features['Price']
    ]

    categorical_features = [
        features['Produce_Variety'],#
        features['Commodity_Type'],#
        features['Unit']#
    ]

    # One-hot encode categorical features
    encoder = OneHotEncoder(handle_unknown='ignore')
    encoded_categorical = encoder.fit_transform([categorical_features]).toarray()

    # Combine numerical and encoded categorical features
    my_data = np.concatenate((numerical_features, encoded_categorical.flatten()))

    # Reshape the input data to a 2D array
    input_data = np.array(my_data).reshape(1, -1)
    return input_data

from flask import Flask, request, jsonify, render_template_string
from pyngrok import ngrok
import joblib

app = Flask(__name__)

# HTML template for the input form
html_form = '''
<!DOCTYPE html>
<html>
<body>
    <h2>Agricultural Market Price Predictor</h2>
    <p>Enter the required information below:</p>
    <hr>
    <p>Note: All fields are required.</p>

    <hr>
    <form action="/predict" method="post">
        Produce Variety (E.g: Horticulture): <input type="text" name="Produce_Variety"><br>
        <br>
        Commodity Type (E.g: Cabbage): <input type="text" name="Commodity_Type"><br>
        <br>
        Unit (E.g: Ext. Box): <input type="text" name="Unit"><br>
        <br>
        Date (DD/MM/YYYY): <input type="text" name="Date"><br>
        <br>
        Package Weight in Kg (E.g: 120): <input type="number" name="package_weight(Kg)"><br>
        <br>
        Total Price of Commodities in Ksh (E.g: 2205): <input type="number" name="Price"><br>
        <br>
        <br>
        <br>
        <input type="submit" value="Predict">
    </form>
</body>
</html>
'''

@app.route('/')
def home():
    return render_template_string(html_form)

@app.route('/predict', methods=['POST'])
def predict():
  try:
    # Get the form data
    feature_values = request.form.to_dict()
    # load the trained model joblib file
    with open('base_model.sav', 'rb') as file:
      model = joblib.load(file)

    # Convert numeric fields
    numeric_fields = ['package_weight(Kg)', 'Price']
    for key in numeric_fields:
      feature_values[key] = float(feature_values[key])

    # Convert categorical fields
    categorical = ['Produce_Variety', 'Commodity_Type', 'Unit']
    for key in categorical:
        feature_values[key] = str(feature_values[key])

    # Convert the input date to a Unix timestamp
    date_obj = datetime.strptime(feature_values['Date'], '%d/%m/%Y')
    feature_values['Day'] = date_obj.day
    feature_values['Month'] = date_obj.month
    feature_values['Year'] = date_obj.year
    feature_values.pop('Date')

    input_data = user_input_transformer(feature_values)

    scaler_X = StandardScaler()
    input_data = scaler_X.fit_transform(input_data.reshape(1, -1))
    predicted_price = model.predict(input_data)

    return f"Predicted Price: {predicted_price[0]:.2f}"

  except Exception as e:
    return f"Error: {str(e)}",500
# Set up ngrok
public_url = ngrok.connect(5000)
print(f" * ngrok tunnel \"{public_url}\" -> \"http://127.0.0.1:5000/\"")

if __name__ == '__main__':
    app.run()

